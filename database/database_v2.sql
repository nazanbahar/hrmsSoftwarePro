
--DROP SCHEMA FOR ALL TABLES
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;



--FUNCTIONS

CREATE OR REPLACE FUNCTION validate_email_by_domain(user_id INTEGER, web_address CHARACTER VARYING(255)) 
RETURNS BOOLEAN AS $$
DECLARE
	DECLARE user_email_address varchar(320);
    DECLARE result boolean;
BEGIN
	SELECT email_address INTO user_email_address FROM users where id = user_id;
    SELECT web_address like '%' || SUBSTRING(user_email_address,POSITION('@' in user_email_address) + 1) INTO result;
	IF result = false THEN
		raise 'E-mail(%) and web address(%) must have the same domain name.',user_email_address,web_address;
	END IF;
	RETURN result;
END; $$ LANGUAGE plpgsql;


--TABLES
--users
CREATE TABLE users(
	id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, --identity increment
	email_address CHARACTER VARYING(320) UNIQUE NOT NULL,
	password CHARACTER VARYING(25) UNIQUE NOT NULL
);

--candidates
CREATE TABLE candidates(
	id INTEGER PRIMARY KEY NOT NULL,
	first_name CHARACTER VARYING(35) NOT NULL,
	last_name CHARACTER VARYING(35) NOT NULL,
	identification_number CHARACTER VARYING(11) UNIQUE NOT NULL, --unique and not null
	birth_date DATE NOT NULL,
	
	FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);

--employers
CREATE TABLE employers(
	id INTEGER PRIMARY KEY NOT NULL,
	company_name CHARACTER VARYING(255) NOT NULL,
	web_address CHARACTER VARYING(255) NOT NULL CHECK(validate_email_by_domain(id,web_address)),
	
	FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);


--employees
CREATE TABLE employees(
	id INTEGER PRIMARY KEY NOT NULL,
	first_name CHARACTER VARYING(35) NOT NULL,
	last_name CHARACTER VARYING(35) NOT NULL,
	 
	FOREIGN KEY (id) REFERENCES users(id) ON DELETE CASCADE
);


--employer_phones
CREATE TABLE employer_phones(
	id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	employer_id INTEGER NOT NULL ,
	phone_number CHARACTER VARYING(12) UNIQUE NOT NULL,
	
	FOREIGN KEY (employer_id) REFERENCES employers (id) ON DELETE CASCADE
);


--verification_codes
CREATE TABLE verification_codes(
	id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	code CHARACTER VARYING(38) UNIQUE NOT NULL
	
);


--verification_codes_candidates
CREATE TABLE verification_codes_candidates(
	id INTEGER PRIMARY KEY NOT NULL,
	candidate_id INTEGER NOT NULL,
	
	FOREIGN KEY (id) REFERENCES verification_codes (id) ON DELETE CASCADE,
	FOREIGN KEY (candidate_id) REFERENCES candidates (id) ON DELETE CASCADE

);

--verification_codes_employers
CREATE TABLE verification_codes_employers(
	id INTEGER PRIMARY KEY NOT NULL,
	employer_id INTEGER NOT NULL,
	
	FOREIGN KEY (id) REFERENCES verification_codes (id) ON DELETE CASCADE,
	FOREIGN KEY (employer_id) REFERENCES employers (id) ON DELETE CASCADE
);

--employee_confirms 
CREATE TABLE employee_confirms(
	id INTEGER NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	employee_id INTEGER NOT NULL,
	is_confirmed BOOLEAN DEFAULT false NOT NULL,
	
	FOREIGN KEY (employee_id) REFERENCES employees (id) ON DELETE CASCADE
);


--employee_confirms_employers
CREATE TABLE employee_confirms_employers(
	id INTEGER PRIMARY KEY NOT NULL,
	employer_id INTEGER NOT NULL,
	
	FOREIGN KEY (id) REFERENCES employee_confirms (id) ON DELETE CASCADE,
	FOREIGN KEY (employer_id) REFERENCES employers (id) ON DELETE CASCADE
);

--job_titles
CREATE TABLE job_titles(
	id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL,
	title CHARACTER VARYING(255) UNIQUE NOT NULL
	
);


--data
INSERT INTO job_titles(title) 
VALUES ('Software Developer'), ('Software Architect'), ('UX Designer')
RETURNING*;


